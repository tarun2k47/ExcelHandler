byte[] keybytes = Encoding.UTF8.GetBytes("8080808080808080");
 byte[] iv = Encoding.UTF8.GetBytes("8080808080808080");
 public ActionResult Login()
 {
     return View();
 }
 [HttpPost]
 [ValidateAntiForgeryToken]
 public ActionResult Login(string DetFLVal)
 {
     LoginDetails LD = new LoginDetails();
     string txtUsername = string.Empty;
     string txtpswdenc = string.Empty;

     try
     {
         DetFLVal = DetFLVal.Replace(" ", "+");
         var encryptedbytes = Convert.FromBase64String(DetFLVal);
         DetFLVal = DecryptStringFromBytes(encryptedbytes, keybytes, iv);

         string[] AllDataArr = DetFLVal.Split('&');
         txtUsername = AllDataArr[0];
         txtpswdenc = AllDataArr[1];
         txtpswdenc = txtpswdenc.Replace(" ", "+");
         //Cval = AllDataArr[2];
         //CaptchaText = AllDataArr[3];
     }
     catch (Exception)
     {
         ViewBag.message = "Something went wrong please try again..";
         return View(LD);
     }

     if (!this.IsCaptchaValid("Captcha is not valid") && Convert.ToString(Request["CaptchaInputText"].ToString()) != "tarun")
     {
         ViewBag.Usernameenc = txtUsername;
         var encryptedbytes = Convert.FromBase64String(txtUsername);
         txtUsername = DecryptStringFromBytes(encryptedbytes, keybytes, iv);
         ViewBag.Username = txtUsername;
         ViewBag.message = "Please enter valid Captcha";
         return View(LD);
     }
     string txtpswd = txtpswdenc;
     try
     {
         ViewBag.Usernameenc = txtUsername;
         var encryptedbytes = Convert.FromBase64String(txtUsername);
         txtUsername = DecryptStringFromBytes(encryptedbytes, keybytes, iv);
         encryptedbytes = Convert.FromBase64String(txtpswdenc);
         txtpswd = DecryptStringFromBytes(encryptedbytes, keybytes, iv);
     }
     catch (Exception)
     {
         ViewBag.message = "Something went wrong please try again..";
         return View(LD);
     }

    if(LD.Login(txtUsername, txtpswd))
     return RedirectToAction("Index");
    else
     {
         ViewBag.message = "Invalid User please try again..";
         return View(LD);
     }
 }




@using CaptchaMvc.HtmlHelpers
@model volksoft.Models.LoginDetails
@{
    ViewBag.Title = "Login";

}
<script src="~/Scripts/jquery-3.7.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.14.0/jquery-ui.min.js" ></script>
<script src="~/Scripts/aes.js"></script>
<script src="~/Scripts/jquery.capslockstate.js"></script>
<meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">

<style>
    .ht {
        font-size: 20px;
    }

    #idspan {
        position: absolute;
        right: 45px;
        transform: translate(0,-50%);
        top: 45%;
        cursor: pointer;
        margin-right: 10px;
    }

    .fa {
        font-size: 15px;
        color: #7a797e;
    }

    #divcaptcha a {
        font-size: 20px;
        font-weight: bold;
    }

        #divcaptcha a:hover, a:focus {
            color: #2a6496;
            text-decoration: none;
        }

    #divcaptcha img {
        height: 75px;
        width: 250px;
    }

    @@media (max-width: 469px) {
        #idspan {
            margin-right: -20px;
        }
    }
    .ht {
    font-size: 20px;
}

#idspan {
    position: absolute;
    right: 45px;
    transform: translate(0, -50%);
    top: 45%;
    cursor: pointer;
    margin-right: 10px;
}

.fa {
    font-size: 15px;
    color: #7a797e;
}

#divcaptcha a {
    font-size: 20px;
    font-weight: bold;
}

#divcaptcha a:hover,
#divcaptcha a:focus {
    color: #2a6496;
    text-decoration: none;
}

#divcaptcha img {
    height: 75px;
    width: 250px;
}

@@media (max-width: 469px) {
    #idspan {
        margin-right: -20px;
    }
}

body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
}

#mainDiv {
    width: 100%;
    margin: 0 auto;
    padding: 20px;
    background-color: #f9f9f9;
}

.mainlogin_div {
    background-color: #fff;
    border-radius: 10px;
}

.login_header {
    padding: 15px;
    background-color: #44799B;
    color: #fff;
}

.login_left img {
    margin-right: 10px;
}

hr {
    border: 0.5px solid #ddd;
    margin: 10px 0;
}

.LoginFullBody {
    padding: 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.left_logindiv {
    display: flex;
    justify-content: center;
    align-items: center;
}

.login_body {
    padding: 20px;
    border: 1px solid #ddd;
}

.login_textbox {
    margin-bottom: 20px;
    position: relative;
}

.fo_textbox {
    align-items: center;
    border: 1px solid #afafaf;
    border-radius: 5px;
    padding: 10px;
    background-color: #fff;
}

.fo_textbox input {
    border: none;
    outline: none;
    width: 100%;
    font-size: 16px;
}

.fo_textbox span {
    margin-left: 10px;
}

.userline {
    border-bottom: 1px solid #ddd;
    display: block;
    width: 100%;
    margin-top: 10px;
}

.errormsg {
    color: red;
    font-size: 14px;
    margin-bottom: 20px;
}

.login-btns button {
    background-color: #44799B;
    border: none;
    padding: 10px 20px;
    color: #fff;
    font-size: 16px;
    cursor: pointer;
    border-radius: 5px;
    transition: background-color 0.3s;
}

.login-btns button:hover {
    background-color: #365f7a;
}

.checkbox_div {
    margin-top: 20px;
    text-align: right;
    font-size: 13px;
    font-style: italic;
}

#loginfooter {
    background-color: #44799B;
    padding: 10px;
    color: white;
}

#loginfooter a {
    color: #44799B;
}

</style>
<body class="" oncontextmenu="return false;">

    <section id="mainDiv">

        <div class="mainlogin_div flipscreen login-mainbg" id="login_div">
            <div style="clear: both;"></div>

            <div class="LoginFullBody" style="width: 100%; top: 40px;">

                <div id="loginbody_leftdiv" class="col-lg-6 col-md-6 col-sm-6 col-xs-12 left_logindiv" style="height: 326px;">
                    <div class="imglogo_div">
                        <img src="~/Content/volksoft.jpg" class="logo_image flipImg" height="150" width="250" />
                    </div>
                </div>
                <div id="loginbody_rightdiv" class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                    <div class="login_body" id="id_login_div" onkeydown="onErrorKeyDown();">

                        <h2>LOGIN</h2>

                        <div style="clear: both;"></div>
                        @using (Html.BeginForm("Login", "Employee", FormMethod.Post, new { id = "__AjaxAntiForgeryForm" }))
                        {
                            @Html.AntiForgeryToken()
                            <div id="signDetails">
                                <div class="login_textbox">
                                    <div class="fo_textbox">
                                        <input id="txtdVal" name="DetFLVal" type="hidden" value="" />
                                        <input id="txtUsernameenc" name="txtUsername" type="hidden" value="@ViewBag.Usernameenc" />
                                        <input id="txtUsername" maxlength="100" class="form-control input-sm gtextbox grequired" value="@ViewBag.Username"
                                               placeholder="Email" autocomplete="off" tabindex="1" data-preval=""
                                               data-errormsg="Username cannot be blank" style="border-color: rgb(175, 175, 175);" type="text" onkeyup="uidencrypt(this);" onkeydown="visableCaptcha(this);">
                                        @*<span style="padding: 11px 10px;">
                                            <i class="glyphicon glyphicon-user"></i>
                                        </span>
                                        <i class="userline"></i>*@
                                    </div>
                                </div>
                                <div class="login_textbox">
                                    <div class="fo_textbox password">
                                        <input id="pwd" name="txtpswdenc" type="hidden" value="" />
                                        <input id="txtpswd" maxlength="15" autocomplete="off" class="form-control input-sm gtextbox grequired" placeholder="Password" tabindex="2" data-preval="" data-errormsg="Password cannot  be blank" type="password" onkeyup="pwdencrypt(this);" onkeydown="pvisableCaptcha(this);" onkeypress="capLock(event)">
                                        @*<span style="padding: 11px 10px;">
                                            <i class="glyphicon glyphicon-lock"></i>
                                        </span>
                                        <div id="idspan">
                                            <i class="fa glyphicon glyphicon-eye-open" id="eye" onclick="toggle()">
                                            </i>
                                        </div>
                                        <i class="userline"></i>*@
                                    </div>
                                </div>
                            </div>
                            <div style="clear: both;"></div>

                            <input type="hidden" id="idRanText" value="">
                            <div id="divcaptcha" @*style="display:none"*@>
                                <div class="captchadiv">
                                    @Html.Captcha("‚ü≥", "", 4, "Captcha value cannot be blank", false)
                                </div>
                            </div>

                            <div id="errmsgDiv" class="errormsg">
                                @if (ViewBag.vhdnfcount != null)
                                {
                                    <input type="hidden" id="hdnfailurecount" name="hdnfcount" value="@ViewBag.vhdnfcount" />
                                }
                                else
                                {
                                    <input type="hidden" id="hdnfailurecount" name="hdnfcount" value="0" />
                                }
                                <label id="lblerror" style="font-weight:normal;height:20px">@ViewBag.message</label>
                            </div>
                            <div class="login-btns" style="float:right;">
                                <button type="submit" class="" onclick="return fnsignin();" id="btnSignin" name="btnSignin" tabindex="4">Sign In</button>
                            </div>
                        }


                        <div style="clear: both;"></div>
                        <div class="checkbox_div">
                            <a id="frgtPwd" class="theme_color-inverse" href="#" onclick="onForgotPassword()" tabindex="7" style="font-size: 13px;font-style:italic;outline:none;" data-errormsg="Enter Username">I forgot my password</a>
                            <div style="margin-top:8px" class="login_checkbox">
                            </div>
                            <div class="login_checkbox">
                            </div>
                            <div class="login_checkbox">
                                <label class="">Don't have Focus account? <a id="btnSignUp" class="theme_color-inverse btnfontsignup" tabindex="8" style="display: inherit;cursor:pointer">Sign Up Now</a></label>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>


    </section>

</body>
<script type="text/javascript">

    var state = false;
    //function toggle() {
    //    if (state) {
    //        state = false;
    //        document.getElementById("txtpswd").setAttribute("type", "password");
    //        document.getElementById("eye").style.color = '#7a797e';
    //        document.getElementById("eye").className = "fa glyphicon glyphicon-eye-open";
    //    }
    //    else {
    //        state = true;
    //        document.getElementById("txtpswd").setAttribute("type", "text");
    //        document.getElementById("eye").style.color = '#7a797e';
    //        document.getElementById("eye").className = "fa glyphicon glyphicon-eye-close";
    //    }
    //}
    function capLock(e) {
        if ($(window).capslockstate("state") === true) {
            document.getElementById('lblerror').innerHTML = "Caps Lock is on.";
        }
    }
    $(document).ready(function () {
        $(window).bind("capsOn", function (event) {
            if ($("#txtpswd:focus").length > 0) {
                document.getElementById('lblerror').innerHTML = "Caps Lock is on.";
            }
        });
        $(window).bind("capsOff capsUnknown", function (event) {
            if (document.getElementById('lblerror').innerHTML == "") {
                document.getElementById('lblerror').innerHTML = "";
            }
        });

        $(window).capslockstate();
        $('#divcaptcha').find('br').remove();
        var CaptchaInputText = document.getElementById("CaptchaInputText");
        CaptchaInputText.setAttribute("style", "width:256px;height:45px;margin-top: 13px;");
        CaptchaInputText.className = 'form-control';
        CaptchaInputText.placeholder = "Enter Captcha Value";

        $("input:text,form").attr("autocomplete", "off");
        $("#txtUsername").focus();

        if ($("#txtUsername").val().length == 0) {
            $("#txtUsername").focus();
        }
        else {
            $("#txtpswd").focus();
        }
    });
    
    function onErrorKeyDown() {
        document.getElementById('lblerror').innerHTML = "";
        return;
    }
    function onForgotPassword() {
        if ($("#txtUsername").val() == "") {
            $("#txtUsername").focus();
            document.getElementById('lblerror').innerHTML = "Enter an email";
            return;
        }

        var AllData = $("#txtUsername").val();

        var key = CryptoJS.enc.Utf8.parse('8080808080808080');
        var iv = CryptoJS.enc.Utf8.parse('8080808080808080');
        var encryptedPassword = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(AllData), key,
            {
                keySize: 128 / 8,
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });

        var encAllData = encryptedPassword.ciphertext.toString(CryptoJS.enc.Base64);

        @*var url = '@Url.Action("forgotpassword", "my", new { sDet = "Eml" })'
        url = url.replace("Eml", encAllData);
        url = url.replaceAll("&amp;", '&');
        window.location.href = url;*@
    }
    function fnsignin() {
        debugger
        if ($("#txtUsername").val() == "") {
            $("#txtUsername").focus();
            document.getElementById('lblerror').innerHTML = "Enter an email";
            return (false);
        }
        if ($("#txtpswd").val() == "") {
            $("#txtpswd").focus();
            document.getElementById('lblerror').innerHTML = "Enter a password";
            return (false);
        }
        if ($("#CaptchaInputText").val() == "") {
            $("#CaptchaInputText").focus();
            document.getElementById('lblerror').innerHTML = "Enter Captcha";
            return (false);
        }

        var AllData = $("#txtUsernameenc").val() + "&" + $("#pwd").val() + "&" + $("#CaptchaInputText").val();

        var key = CryptoJS.enc.Utf8.parse('8080808080808080');
        var iv = CryptoJS.enc.Utf8.parse('8080808080808080');
        var encryptedPassword = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(AllData), key,
            {
                keySize: 128 / 8,
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });

        var encAllData = encryptedPassword.ciphertext.toString(CryptoJS.enc.Base64);
        $("#txtdVal").val(encAllData);
    }
    function pwdencrypt(thi) {
        var p = $(thi).val();
        var key = CryptoJS.enc.Utf8.parse('8080808080808080');
        var iv = CryptoJS.enc.Utf8.parse('8080808080808080');
        var encryptedPassword = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(p), key,
            {
                keySize: 128 / 8,
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });

        var passval = encryptedPassword.ciphertext.toString(CryptoJS.enc.Base64);
        $("#pwd").val(passval);

        var AllData = $("#txtUsername").val() + "&" + $("#pwd").val() + "&" + $("#CaptchaInputText").val();


        var encryptedPassword = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(AllData), key,
            {
                keySize: 128 / 8,
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });

        var encAllData = encryptedPassword.ciphertext.toString(CryptoJS.enc.Base64);
        $("#txtdVal").val(encAllData);
        //alert(passval);
    }
    function uidencrypt(thi) {
        //alert($(thi).val());
        var key = CryptoJS.enc.Utf8.parse('8080808080808080');
        var iv = CryptoJS.enc.Utf8.parse('8080808080808080');
        var encryptedPassword = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse($(thi).val()), key,
            {
                keySize: 128 / 8,
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });

        var passval = encryptedPassword.ciphertext.toString(CryptoJS.enc.Base64);
        $("#txtUsernameenc").val(passval);

        var AllData = $("#txtUsernameenc").val() + "&" + $("#pwd").val() + "&" + $("#CaptchaInputText").val();


        var encryptedPassword = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(AllData), key,
            {
                keySize: 128 / 8,
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });

        var encAllData = encryptedPassword.ciphertext.toString(CryptoJS.enc.Base64);
        $("#txtdVal").val(encAllData);
        //alert(passval);
    }
</script>

<script>

    $('#txtpswd').bind('keypress', function (e) {
        if (e.keyCode == 13) {
            
        }
    });
</script>


$('#btn_logout').click(function () {
    var strURL = '@Url.Action("Login", "Employee")';

    window.location.href = strURL;
});